content='# Backend Dependencies - Real API Test E-commerce Platform\n\n## Overview\n\nThis document outlines the Python dependencies required for the Django REST API backend of the Real API Test E-commerce Platform. The backend provides a comprehensive API for managing products, users, orders, payments, and real-time notifications.\n\n## Dependencies File Structure\n\nThe `requirements.txt` file contains all necessary Python packages and their versions to ensure consistent deployment across different environments.\n\n## Core Dependencies\n\n### Web Framework\n- **Django**: High-level Python web framework for rapid development\n- **djangorestframework**: Powerful toolkit for building Web APIs in Django\n- **django-cors-headers**: Handles Cross-Origin Resource Sharing (CORS) for frontend integration\n\n### Database & ORM\n- **psycopg2-binary**: PostgreSQL adapter for Python (production database)\n- **django-extensions**: Additional management commands and database utilities\n\n### Authentication & Security\n- **djangorestframework-simplejwt**: JSON Web Token authentication for DRF\n- **django-allauth**: Comprehensive authentication system\n- **cryptography**: Cryptographic recipes and primitives\n\n### Payment Processing\n- **stripe**: Official Stripe Python library for payment processing\n- **requests**: HTTP library for external API communications\n\n### Real-time Features\n- **channels**: Django extension for handling WebSockets and async features\n- **channels-redis**: Redis channel layer for Django Channels\n- **redis**: Python Redis client\n\n### API Documentation\n- **drf-spectacular**: OpenAPI 3 schema generation for Django REST Framework\n- **django-silk**: Live profiling and inspection tool for Django\n\n### Development & Testing\n- **pytest**: Testing framework\n- **pytest-django**: Django plugin for pytest\n- **pytest-cov**: Coverage plugin for pytest\n- **factory-boy**: Test fixtures replacement\n- **faker**: Generate fake data for testing\n\n### Production & Deployment\n- **gunicorn**: Python WSGI HTTP Server for UNIX\n- **whitenoise**: Static file serving for Python web apps\n- **django-storages**: Custom storage backends for Django\n- **boto3**: AWS SDK for Python (for S3 storage)\n\n### Utilities\n- **python-decouple**: Strict separation of settings from code\n- **pillow**: Python Imaging Library for image processing\n- **celery**: Distributed task queue\n- **flower**: Web-based tool for monitoring Celery clusters\n\n## Installation\n\n### Prerequisites\n- Python 3.8 or higher\n- pip (Python package manager)\n- Virtual environment (recommended)\n\n### Setup Instructions\n\n1. **Create and activate virtual environment:**\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **Verify installation:**\n   ```bash\n   pip list\n   ```\n\n## Environment-Specific Requirements\n\n### Development\nFor development environments, additional packages may be included:\n- Debug toolbar for Django\n- Code formatting tools (black, flake8)\n- Pre-commit hooks\n\n### Production\nProduction deployments should include:\n- Database connectors (PostgreSQL)\n- Web server interfaces (gunicorn)\n- Monitoring and logging tools\n\n## Dependency Management\n\n### Adding New Dependencies\n1. Install the package: `pip install package-name`\n2. Update requirements: `pip freeze > requirements.txt`\n3. Test the application thoroughly\n4. Commit the updated requirements.txt\n\n### Version Pinning\nDependencies are pinned to specific versions to ensure:\n- Consistent behavior across environments\n- Reproducible deployments\n- Security through controlled updates\n\n### Security Updates\nRegularly update dependencies for security patches:\n```bash\npip install --upgrade package-name\npip freeze > requirements.txt\n```\n\n## Common Issues & Troubleshooting\n\n### Installation Problems\n\n**Issue**: Package compilation errors\n**Solution**: Install system dependencies or use binary packages\n```bash\n# For PostgreSQL on Ubuntu/Debian\nsudo apt-get install libpq-dev python3-dev\n\n# For macOS\nbrew install postgresql\n```\n\n**Issue**: Version conflicts\n**Solution**: Use virtual environments and check for conflicting packages\n```bash\npip check\n```\n\n### Runtime Issues\n\n**Issue**: Import errors\n**Solution**: Ensure all dependencies are installed and virtual environment is activated\n```bash\npip install -r requirements.txt --force-reinstall\n```\n\n**Issue**: Database connection errors\n**Solution**: Verify database packages and connection settings\n```bash\npip' additional_kwargs={} response_metadata={'id': 'msg_01FvtKpKruxSst1kQhSNMTmv', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 368, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--ff2cee73-160a-47aa-a73c-4d231b3f18f5-0' usage_metadata={'input_tokens': 368, 'output_tokens': 1024, 'total_tokens': 1392, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}