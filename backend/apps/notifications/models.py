content='from django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.utils import timezone\nfrom django.core.exceptions import ValidationError\nimport uuid\n\nUser = get_user_model()\n\n\nclass NotificationQuerySet(models.QuerySet):\n    """Custom QuerySet for Notification model."""\n    \n    def unread(self):\n        """Filter unread notifications."""\n        return self.filter(is_read=False)\n    \n    def read(self):\n        """Filter read notifications."""\n        return self.filter(is_read=True)\n    \n    def for_user(self, user):\n        """Filter notifications for a specific user."""\n        return self.filter(recipient=user)\n    \n    def by_type(self, notification_type):\n        """Filter notifications by type."""\n        return self.filter(notification_type=notification_type)\n    \n    def recent(self, days=30):\n        """Filter recent notifications within specified days."""\n        cutoff_date = timezone.now() - timezone.timedelta(days=days)\n        return self.filter(created_at__gte=cutoff_date)\n\n\nclass NotificationManager(models.Manager):\n    """Custom manager for Notification model."""\n    \n    def get_queryset(self):\n        return NotificationQuerySet(self.model, using=self._db)\n    \n    def unread(self):\n        return self.get_queryset().unread()\n    \n    def read(self):\n        return self.get_queryset().read()\n    \n    def for_user(self, user):\n        return self.get_queryset().for_user(user)\n    \n    def by_type(self, notification_type):\n        return self.get_queryset().by_type(notification_type)\n    \n    def recent(self, days=30):\n        return self.get_queryset().recent(days)\n    \n    def create_notification(self, recipient, title, message, notification_type=\'INFO\', **kwargs):\n        """Create a new notification with validation."""\n        try:\n            notification = self.create(\n                recipient=recipient,\n                title=title,\n                message=message,\n                notification_type=notification_type,\n                **kwargs\n            )\n            return notification\n        except ValidationError as e:\n            raise ValidationError(f"Failed to create notification: {e}")\n    \n    def mark_all_read(self, user):\n        """Mark all notifications as read for a specific user."""\n        return self.for_user(user).unread().update(\n            is_read=True,\n            read_at=timezone.now()\n        )\n\n\nclass Notification(models.Model):\n    """\n    Model for storing user notifications.\n    \n    This model handles various types of notifications including:\n    - Order updates\n    - Payment confirmations\n    - System alerts\n    - Marketing messages\n    """\n    \n    class NotificationType(models.TextChoices):\n        INFO = \'INFO\', \'Information\'\n        SUCCESS = \'SUCCESS\', \'Success\'\n        WARNING = \'WARNING\', \'Warning\'\n        ERROR = \'ERROR\', \'Error\'\n        ORDER = \'ORDER\', \'Order Update\'\n        PAYMENT = \'PAYMENT\', \'Payment\'\n        SYSTEM = \'SYSTEM\', \'System Alert\'\n        MARKETING = \'MARKETING\', \'Marketing\'\n    \n    class Priority(models.TextChoices):\n        LOW = \'LOW\', \'Low\'\n        MEDIUM = \'MEDIUM\', \'Medium\'\n        HIGH = \'HIGH\', \'High\'\n        URGENT = \'URGENT\', \'Urgent\'\n    \n    # Primary fields\n    id = models.UUIDField(\n        primary_key=True,\n        default=uuid.uuid4,\n        editable=False,\n        help_text="Unique identifier for the notification"\n    )\n    \n    recipient = models.ForeignKey(\n        User,\n        on_delete=models.CASCADE,\n        related_name=\'notifications\',\n        help_text="User who will receive this notification"\n    )\n    \n    title = models.CharField(\n        max_length=200,\n        help_text="Brief title of the notification"\n    )\n    \n    message = models.TextField(\n        help_text="' additional_kwargs={} response_metadata={'id': 'msg_01UKSuUchvrkP9XcMN6v4bAY', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 405, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--bf4f42ca-0da6-4e5c-90c6-f703aa577c6f-0' usage_metadata={'input_tokens': 405, 'output_tokens': 1024, 'total_tokens': 1429, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}