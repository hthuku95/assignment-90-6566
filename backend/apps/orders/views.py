content='from rest_framework import generics, status, permissions\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom django.shortcuts import get_object_or_404\nfrom django.db import transaction\nfrom django.utils import timezone\nfrom django.contrib.auth import get_user_model\nimport logging\nimport stripe\nfrom decimal import Decimal\n\nfrom .models import Order, OrderItem, Cart, CartItem\nfrom .serializers import (\n    OrderSerializer, OrderItemSerializer, CartSerializer, \n    CartItemSerializer, OrderCreateSerializer\n)\nfrom apps.products.models import Product\nfrom apps.users.permissions import IsOwnerOrReadOnly\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\nclass CartListCreateView(generics.ListCreateAPIView):\n    """\n    List all cart items for authenticated user or create new cart item\n    """\n    serializer_class = CartItemSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n    def get_queryset(self):\n        cart, created = Cart.objects.get_or_create(user=self.request.user)\n        return CartItem.objects.filter(cart=cart)\n\n    def perform_create(self, serializer):\n        try:\n            cart, created = Cart.objects.get_or_create(user=self.request.user)\n            product = serializer.validated_data[\'product\']\n            quantity = serializer.validated_data[\'quantity\']\n            \n            # Check if item already exists in cart\n            existing_item = CartItem.objects.filter(\n                cart=cart, \n                product=product\n            ).first()\n            \n            if existing_item:\n                existing_item.quantity += quantity\n                existing_item.save()\n                logger.info(f"Updated cart item quantity for user {self.request.user.id}")\n            else:\n                serializer.save(cart=cart)\n                logger.info(f"Added new item to cart for user {self.request.user.id}")\n                \n        except Exception as e:\n            logger.error(f"Error adding item to cart: {str(e)}")\n            raise\n\n\nclass CartItemDetailView(generics.RetrieveUpdateDestroyAPIView):\n    """\n    Retrieve, update or delete a cart item\n    """\n    serializer_class = CartItemSerializer\n    permission_classes = [permissions.IsAuthenticated, IsOwnerOrReadOnly]\n\n    def get_queryset(self):\n        cart = get_object_or_404(Cart, user=self.request.user)\n        return CartItem.objects.filter(cart=cart)\n\n    def perform_update(self, serializer):\n        try:\n            serializer.save()\n            logger.info(f"Updated cart item for user {self.request.user.id}")\n        except Exception as e:\n            logger.error(f"Error updating cart item: {str(e)}")\n            raise\n\n    def perform_destroy(self, instance):\n        try:\n            instance.delete()\n            logger.info(f"Removed cart item for user {self.request.user.id}")\n        except Exception as e:\n            logger.error(f"Error removing cart item: {str(e)}")\n            raise\n\n\n@api_view([\'DELETE\'])\n@permission_classes([permissions.IsAuthenticated])\ndef clear_cart(request):\n    """\n    Clear all items from user\'s cart\n    """\n    try:\n        cart = get_object_or_404(Cart, user=request.user)\n        cart.items.all().delete()\n        logger.info(f"Cleared cart for user {request.user.id}")\n        return Response(\n            {\'message\': \'Cart cleared successfully\'}, \n            status=status.HTTP_200_OK\n        )\n    except Exception as e:\n        logger.error(f"Error clearing cart: {str(e)}")\n        return Response(\n            {\'error\': \'Failed to clear cart\'}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )\n\n\n@api_view([\'GET\'])\n@permission_classes([permissions.IsAuthenticated])\ndef cart_summary(request):\n    """\n    Get cart summary with total items and total price\n    """\n    try:\n        cart' additional_kwargs={} response_metadata={'id': 'msg_01U6WJhU6W9XDMyDRyfdVYmP', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--f62b04db-81bd-42c9-a5eb-d069c46ca91a-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}