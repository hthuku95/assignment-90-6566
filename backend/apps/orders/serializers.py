content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom django.db import transaction\nfrom django.core.exceptions import ValidationError\nfrom decimal import Decimal\nfrom .models import Order, OrderItem, Cart, CartItem\nfrom ..products.models import Product\nfrom ..products.serializers import ProductSerializer\n\nUser = get_user_model()\n\n\nclass CartItemSerializer(serializers.ModelSerializer):\n    """Serializer for cart items with product details."""\n    \n    product = ProductSerializer(read_only=True)\n    product_id = serializers.IntegerField(write_only=True)\n    subtotal = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = CartItem\n        fields = [\n            \'id\', \'product\', \'product_id\', \'quantity\', \n            \'created_at\', \'updated_at\', \'subtotal\'\n        ]\n        read_only_fields = [\'id\', \'created_at\', \'updated_at\']\n    \n    def get_subtotal(self, obj):\n        """Calculate subtotal for the cart item."""\n        return obj.get_subtotal()\n    \n    def validate_product_id(self, value):\n        """Validate that the product exists and is active."""\n        try:\n            product = Product.objects.get(id=value)\n            if not product.is_active:\n                raise serializers.ValidationError("Product is not available.")\n            return value\n        except Product.DoesNotExist:\n            raise serializers.ValidationError("Product does not exist.")\n    \n    def validate_quantity(self, value):\n        """Validate quantity is positive and within stock limits."""\n        if value <= 0:\n            raise serializers.ValidationError("Quantity must be greater than 0.")\n        \n        # Check stock availability during validation\n        if hasattr(self, \'initial_data\') and \'product_id\' in self.initial_data:\n            try:\n                product = Product.objects.get(id=self.initial_data[\'product_id\'])\n                if value > product.stock_quantity:\n                    raise serializers.ValidationError(\n                        f"Only {product.stock_quantity} items available in stock."\n                    )\n            except Product.DoesNotExist:\n                pass  # Will be caught by product_id validation\n        \n        return value\n    \n    def create(self, validated_data):\n        """Create or update cart item if it already exists."""\n        cart = validated_data[\'cart\']\n        product_id = validated_data[\'product_id\']\n        quantity = validated_data[\'quantity\']\n        \n        try:\n            # Try to get existing cart item\n            cart_item = CartItem.objects.get(cart=cart, product_id=product_id)\n            # Update quantity\n            cart_item.quantity += quantity\n            cart_item.save()\n            return cart_item\n        except CartItem.DoesNotExist:\n            # Create new cart item\n            return super().create(validated_data)\n\n\nclass CartSerializer(serializers.ModelSerializer):\n    """Serializer for shopping cart with items and totals."""\n    \n    items = CartItemSerializer(many=True, read_only=True)\n    total_items = serializers.SerializerMethodField()\n    total_amount = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Cart\n        fields = [\n            \'id\', \'user\', \'items\', \'total_items\', \n            \'total_amount\', \'created_at\', \'updated_at\'\n        ]\n        read_only_fields = [\'id\', \'user\', \'created_at\', \'updated_at\']\n    \n    def get_total_items(self, obj):\n        """Get total number of items in cart."""\n        return obj.get_total_items()\n    \n    def get_total_amount(self, obj):\n        """Get total amount for all items in cart."""\n        return obj.get_total_amount()\n\n\nclass OrderItemSerializer(serializers.ModelSerializer):\n    """Serializer for order items with product details."""\n    \n    product = ProductSerializer(read_only=True)\n    subtotal = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = OrderItem' additional_kwargs={} response_metadata={'id': 'msg_01S1b536mim2mbxWfgFCW9Q5', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--3a12688f-0aa2-4025-ab6b-c61158f3fd73-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}