content='from django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.core.exceptions import ValidationError\nfrom decimal import Decimal\nimport uuid\nfrom django.utils import timezone\n\nUser = get_user_model()\n\nclass Cart(models.Model):\n    """\n    Shopping cart model for storing user\'s items before checkout\n    """\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name=\'cart\')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    session_key = models.CharField(max_length=40, null=True, blank=True)\n\n    class Meta:\n        db_table = \'orders_cart\'\n        verbose_name = \'Cart\'\n        verbose_name_plural = \'Carts\'\n\n    def __str__(self):\n        return f"Cart for {self.user.username if self.user else \'Anonymous\'}"\n\n    @property\n    def total_items(self):\n        """Get total number of items in cart"""\n        return sum(item.quantity for item in self.items.all())\n\n    @property\n    def total_price(self):\n        """Calculate total price of all items in cart"""\n        return sum(item.total_price for item in self.items.all())\n\n    def clear(self):\n        """Remove all items from cart"""\n        self.items.all().delete()\n\n    def add_item(self, product, quantity=1):\n        """Add or update item in cart"""\n        cart_item, created = CartItem.objects.get_or_create(\n            cart=self,\n            product=product,\n            defaults={\'quantity\': quantity}\n        )\n        if not created:\n            cart_item.quantity += quantity\n            cart_item.save()\n        return cart_item\n\nclass CartItem(models.Model):\n    """\n    Individual items in a shopping cart\n    """\n    cart = models.ForeignKey(Cart, on_delete=models.CASCADE, related_name=\'items\')\n    product = models.ForeignKey(\'products.Product\', on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField(\n        default=1,\n        validators=[MinValueValidator(1), MaxValueValidator(999)]\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        db_table = \'orders_cart_item\'\n        unique_together = (\'cart\', \'product\')\n        verbose_name = \'Cart Item\'\n        verbose_name_plural = \'Cart Items\'\n\n    def __str__(self):\n        return f"{self.quantity}x {self.product.name}"\n\n    @property\n    def total_price(self):\n        """Calculate total price for this cart item"""\n        return self.product.price * self.quantity\n\n    def clean(self):\n        """Validate cart item"""\n        if self.quantity > self.product.stock_quantity:\n            raise ValidationError(f"Not enough stock. Available: {self.product.stock_quantity}")\n\n    def save(self, *args, **kwargs):\n        self.full_clean()\n        super().save(*args, **kwargs)\n\nclass Order(models.Model):\n    """\n    Order model representing a completed purchase\n    """\n    STATUS_CHOICES = [\n        (\'pending\', \'Pending\'),\n        (\'processing\', \'Processing\'),\n        (\'shipped\', \'Shipped\'),\n        (\'delivered\', \'Delivered\'),\n        (\'cancelled\', \'Cancelled\'),\n        (\'refunded\', \'Refunded\'),\n    ]\n\n    PAYMENT_STATUS_CHOICES = [\n        (\'pending\', \'Pending\'),\n        (\'paid\', \'Paid\'),\n        (\'failed\', \'Failed\'),\n        (\'refunded\', \'Refunded\'),\n        (\'partially_refunded\', \'Partially Refunded\'),\n    ]\n\n    id = models.UUIDField(primary_key=True, default' additional_kwargs={} response_metadata={'id': 'msg_011yChJMp9uqxE2s7ow5vksD', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 405, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--8839bfe4-f03a-4833-ad95-358a741d4306-0' usage_metadata={'input_tokens': 405, 'output_tokens': 1024, 'total_tokens': 1429, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}