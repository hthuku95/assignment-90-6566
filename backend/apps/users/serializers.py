content='from rest_framework import serializers\nfrom django.contrib.auth import authenticate\nfrom django.contrib.auth.password_validation import validate_password\nfrom django.core.exceptions import ValidationError\nfrom django.utils.translation import gettext_lazy as _\nfrom .models import User, UserProfile\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n\nclass UserProfileSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user profile information.\n    """\n    \n    class Meta:\n        model = UserProfile\n        fields = [\n            \'phone_number\',\n            \'date_of_birth\',\n            \'address_line_1\',\n            \'address_line_2\',\n            \'city\',\n            \'state\',\n            \'postal_code\',\n            \'country\',\n            \'avatar\'\n        ]\n        extra_kwargs = {\n            \'phone_number\': {\'required\': False},\n            \'date_of_birth\': {\'required\': False},\n            \'address_line_1\': {\'required\': False},\n            \'address_line_2\': {\'required\': False},\n            \'city\': {\'required\': False},\n            \'state\': {\'required\': False},\n            \'postal_code\': {\'required\': False},\n            \'country\': {\'required\': False},\n            \'avatar\': {\'required\': False},\n        }\n\n    def validate_phone_number(self, value):\n        """\n        Validate phone number format.\n        """\n        if value and not value.replace(\'+\', \'\').replace(\'-\', \'\').replace(\' \', \'\').isdigit():\n            raise serializers.ValidationError(_(\'Please enter a valid phone number.\'))\n        return value\n\n\nclass UserSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user information including profile data.\n    """\n    profile = UserProfileSerializer(read_only=True)\n    full_name = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = User\n        fields = [\n            \'id\',\n            \'username\',\n            \'email\',\n            \'first_name\',\n            \'last_name\',\n            \'full_name\',\n            \'is_active\',\n            \'date_joined\',\n            \'last_login\',\n            \'profile\'\n        ]\n        read_only_fields = [\'id\', \'date_joined\', \'last_login\']\n\n    def get_full_name(self, obj):\n        """\n        Return user\'s full name.\n        """\n        return f"{obj.first_name} {obj.last_name}".strip() or obj.username\n\n\nclass UserRegistrationSerializer(serializers.ModelSerializer):\n    """\n    Serializer for user registration.\n    """\n    password = serializers.CharField(\n        write_only=True,\n        min_length=8,\n        style={\'input_type\': \'password\'}\n    )\n    password_confirm = serializers.CharField(\n        write_only=True,\n        style={\'input_type\': \'password\'}\n    )\n    \n    class Meta:\n        model = User\n        fields = [\n            \'username\',\n            \'email\',\n            \'first_name\',\n            \'last_name\',\n            \'password\',\n            \'password_confirm\'\n        ]\n        extra_kwargs = {\n            \'email\': {\'required\': True},\n            \'first_name\': {\'required\': True},\n            \'last_name\': {\'required\': True},\n        }\n\n    def validate_email(self, value):\n        """\n        Validate email uniqueness.\n        """\n        if User.objects.filter(email=value).exists():\n            raise serializers.ValidationError(_(\'A user with this email already exists.\'))\n        return value\n\n    def validate_username(self, value):\n        """\n        Validate username uniqueness and format.\n        """\n        if User.objects.filter(username=value).exists():\n            raise serializers.ValidationError(_(\'A user with this username already exists.\'))\n        \n        if len(value) < 3:\n            raise serializers.ValidationError(_(\'Username must be at least 3 characters long.\'))\n        \n        if not value.replace(\'_\', \'\').replace(\'-\', \'\').isalnum():\n            raise serializers.ValidationError(_(\'Username can only contain letters, numbers, underscores, and hyphens.\'))\n        \n        return value\n\n    def validate_password(self, value):' additional_kwargs={} response_metadata={'id': 'msg_01MdtvqUBCQJESTwbmUEMjGP', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 405, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--a2f608af-d928-4a56-806c-61e246f30ee9-0' usage_metadata={'input_tokens': 405, 'output_tokens': 1024, 'total_tokens': 1429, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}