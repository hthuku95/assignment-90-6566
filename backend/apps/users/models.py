content='from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin\nfrom django.db import models\nfrom django.core.validators import RegexValidator\nfrom django.utils import timezone\nfrom django.core.mail import send_mail\nimport uuid\n\n\nclass UserManager(BaseUserManager):\n    """\n    Custom user manager for handling user creation and management.\n    """\n    \n    def create_user(self, email, password=None, **extra_fields):\n        """\n        Create and save a regular user with the given email and password.\n        """\n        if not email:\n            raise ValueError(\'The Email field must be set\')\n        \n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    \n    def create_superuser(self, email, password=None, **extra_fields):\n        """\n        Create and save a superuser with the given email and password.\n        """\n        extra_fields.setdefault(\'is_staff\', True)\n        extra_fields.setdefault(\'is_superuser\', True)\n        extra_fields.setdefault(\'is_active\', True)\n        \n        if extra_fields.get(\'is_staff\') is not True:\n            raise ValueError(\'Superuser must have is_staff=True.\')\n        if extra_fields.get(\'is_superuser\') is not True:\n            raise ValueError(\'Superuser must have is_superuser=True.\')\n        \n        return self.create_user(email, password, **extra_fields)\n\n\nclass User(AbstractBaseUser, PermissionsMixin):\n    """\n    Custom user model using email as the unique identifier instead of username.\n    """\n    \n    GENDER_CHOICES = [\n        (\'M\', \'Male\'),\n        (\'F\', \'Female\'),\n        (\'O\', \'Other\'),\n        (\'N\', \'Prefer not to say\'),\n    ]\n    \n    # Core fields\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    email = models.EmailField(\n        unique=True,\n        max_length=255,\n        help_text=\'Required. Enter a valid email address.\'\n    )\n    \n    # Personal information\n    first_name = models.CharField(\n        max_length=30,\n        blank=True,\n        help_text=\'User\\\'s first name\'\n    )\n    last_name = models.CharField(\n        max_length=30,\n        blank=True,\n        help_text=\'User\\\'s last name\'\n    )\n    phone_number = models.CharField(\n        max_length=20,\n        blank=True,\n        validators=[\n            RegexValidator(\n                regex=r\'^\\+?1?\\d{9,15}$\',\n                message=\'Phone number must be entered in the format: "+999999999". Up to 15 digits allowed.\'\n            )\n        ],\n        help_text=\'User\\\'s phone number in international format\'\n    )\n    date_of_birth = models.DateField(\n        null=True,\n        blank=True,\n        help_text=\'User\\\'s date of birth\'\n    )\n    gender = models.CharField(\n        max_length=1,\n        choices=GENDER_CHOICES,\n        blank=True,\n        help_text=\'User\\\'s gender\'\n    )\n    \n    # Profile information\n    profile_picture = models.ImageField(\n        upload_to=\'profile_pictures/\',\n        null=True,\n        blank=True,\n        help_text=\'User\\\'s profile picture\'\n    )\n    bio = models.TextField(\n        max_length=500,\n        blank=True,\n        help_text=\'Short biography or description\'\n    )\n    \n    # Account status\n    is_active = models.BooleanField(\n        default=True,\n        help_text=\'Designates whether this user should be treated as active. Unselect this instead of deleting accounts.\'\n    )\n    is_staff = models.BooleanField(\n        default=False,\n        help_text=\'Designates whether the user can log into the admin site.\'\n    )\n    is_verifie' additional_kwargs={} response_metadata={'id': 'msg_01Pk5D7qtQgPPd4veANtvKof', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--b538ef1e-1750-487e-b138-fc8123338aa8-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}