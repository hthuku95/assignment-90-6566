content='from django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.db import transaction\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import csrf_exempt\nfrom rest_framework import status, permissions\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom rest_framework.authtoken.models import Token\nfrom rest_framework.permissions import IsAuthenticated, AllowAny\nfrom django.shortcuts import get_object_or_404\nfrom django.core.exceptions import ValidationError\nfrom django.contrib.auth.password_validation import validate_password\nimport logging\nimport re\nfrom datetime import datetime, timedelta\nfrom django.utils import timezone\nfrom .models import UserProfile\nfrom .serializers import UserSerializer, UserProfileSerializer, UserRegistrationSerializer\n\nlogger = logging.getLogger(__name__)\n\n\nclass UserRegistrationView(APIView):\n    """\n    Handle user registration with email verification\n    """\n    permission_classes = [AllowAny]\n    \n    def post(self, request):\n        try:\n            serializer = UserRegistrationSerializer(data=request.data)\n            \n            if not serializer.is_valid():\n                logger.warning(f"Registration failed - validation errors: {serializer.errors}")\n                return Response({\n                    \'success\': False,\n                    \'message\': \'Validation failed\',\n                    \'errors\': serializer.errors\n                }, status=status.HTTP_400_BAD_REQUEST)\n            \n            # Extract validated data\n            email = serializer.validated_data[\'email\']\n            password = serializer.validated_data[\'password\']\n            first_name = serializer.validated_data.get(\'first_name\', \'\')\n            last_name = serializer.validated_data.get(\'last_name\', \'\')\n            \n            # Check if user already exists\n            if User.objects.filter(email=email).exists():\n                return Response({\n                    \'success\': False,\n                    \'message\': \'User with this email already exists\'\n                }, status=status.HTTP_400_BAD_REQUEST)\n            \n            # Validate password\n            try:\n                validate_password(password)\n            except ValidationError as e:\n                return Response({\n                    \'success\': False,\n                    \'message\': \'Password validation failed\',\n                    \'errors\': list(e.messages)\n                }, status=status.HTTP_400_BAD_REQUEST)\n            \n            # Create user with transaction\n            with transaction.atomic():\n                user = User.objects.create_user(\n                    username=email,  # Use email as username\n                    email=email,\n                    password=password,\n                    first_name=first_name,\n                    last_name=last_name,\n                    is_active=True  # For now, activate immediately\n                )\n                \n                # Create user profile\n                profile = UserProfile.objects.create(\n                    user=user,\n                    phone_number=serializer.validated_data.get(\'phone_number\', \'\'),\n                    date_of_birth=serializer.validated_data.get(\'date_of_birth\'),\n                    email_verified=False\n                )\n                \n                # Create authentication token\n                token, created = Token.objects.get_or_create(user=user)\n                \n                logger.info(f"New user registered: {email}")\n                \n                return Response({\n                    \'success\': True,\n                    \'message\': \'User registered successfully\',\n                    \'data\': {\n                        \'user\': UserSerializer(user).data,\n                        \'profile\': UserProfileSerializer(profile).data,\n                        \'token\': token.key\n                    }\n                }, status=status.HTTP_201_CREATED)\n                \n        except Exception as e:\n            logger.error(f"Registration error: {str(e)}")\n            return Response({\n                \'success\': False,\n                \'message\': \'Registration failed due to server error\'\n            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\nclass UserLoginView(APIView):\n    """\n    Handle user authentication and login\n    """\n    permission_classes = [AllowAny]\n    \n    def post(self, request):\n        ' additional_kwargs={} response_metadata={'id': 'msg_013hQTFgf9zryLSwkfCj8WKL', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--4b1c86f9-a6a0-4b75-9a50-5b2e2386c0ac-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}