content='from decimal import Decimal\nimport uuid\nfrom django.db import models\nfrom django.contrib.auth import get_user_model\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.utils import timezone\nfrom django.core.exceptions import ValidationError\nfrom apps.orders.models import Order\n\nUser = get_user_model()\n\n\nclass PaymentMethod(models.Model):\n    """Model to store user payment methods"""\n    \n    PAYMENT_TYPE_CHOICES = [\n        (\'card\', \'Credit/Debit Card\'),\n        (\'paypal\', \'PayPal\'),\n        (\'bank_transfer\', \'Bank Transfer\'),\n        (\'digital_wallet\', \'Digital Wallet\'),\n    ]\n    \n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\'payment_methods\')\n    payment_type = models.CharField(max_length=20, choices=PAYMENT_TYPE_CHOICES)\n    \n    # Card details (encrypted in production)\n    card_last_four = models.CharField(max_length=4, blank=True, null=True)\n    card_brand = models.CharField(max_length=20, blank=True, null=True)  # visa, mastercard, etc.\n    card_exp_month = models.PositiveIntegerField(\n        blank=True, \n        null=True,\n        validators=[MinValueValidator(1), MaxValueValidator(12)]\n    )\n    card_exp_year = models.PositiveIntegerField(blank=True, null=True)\n    \n    # External provider references\n    stripe_payment_method_id = models.CharField(max_length=100, blank=True, null=True)\n    paypal_account_id = models.CharField(max_length=100, blank=True, null=True)\n    \n    # Metadata\n    is_default = models.BooleanField(default=False)\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        db_table = \'payment_methods\'\n        ordering = [\'-is_default\', \'-created_at\']\n        indexes = [\n            models.Index(fields=[\'user\', \'is_active\']),\n            models.Index(fields=[\'stripe_payment_method_id\']),\n        ]\n    \n    def __str__(self):\n        if self.payment_type == \'card\' and self.card_last_four:\n            return f"{self.get_payment_type_display()} ending in {self.card_last_four}"\n        return f"{self.get_payment_type_display()}"\n    \n    def clean(self):\n        """Validate payment method data"""\n        super().clean()\n        \n        if self.payment_type == \'card\':\n            if not self.card_last_four or not self.card_brand:\n                raise ValidationError("Card details are required for card payments")\n            if not self.card_exp_month or not self.card_exp_year:\n                raise ValidationError("Card expiration date is required")\n            if self.card_exp_year < timezone.now().year:\n                raise ValidationError("Card expiration year cannot be in the past")\n    \n    def save(self, *args, **kwargs):\n        """Override save to handle default payment method logic"""\n        self.clean()\n        \n        # If this is being set as default, remove default from other methods\n        if self.is_default:\n            PaymentMethod.objects.filter(\n                user=self.user, \n                is_default=True\n            ).exclude(pk=self.pk).update(is_default=False)\n        \n        # If this is the user\'s first payment method, make it default\n        elif not PaymentMethod.objects.filter(user=self.user, is_default=True).exists():\n            self.is_default = True\n        \n        super().save(*args, **kwargs)\n    \n    @property\n    def is_expired(self):\n        """Check if card is expired"""\n        ' additional_kwargs={} response_metadata={'id': 'msg_01TaToMjQ2kix4C5UeauKm4L', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 401, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--eb73c1c0-3df9-497e-82f5-7b3e77b3a5dd-0' usage_metadata={'input_tokens': 401, 'output_tokens': 1024, 'total_tokens': 1425, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}