content='from rest_framework import status\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.permissions import IsAuthenticated\nfrom rest_framework.response import Response\nfrom django.conf import settings\nfrom django.contrib.auth import get_user_model\nfrom django.db import transaction\nfrom django.shortcuts import get_object_or_404\nimport stripe\nimport logging\nimport json\nfrom decimal import Decimal\n\nfrom .models import Payment, PaymentIntent\nfrom .serializers import PaymentSerializer, PaymentIntentSerializer\nfrom apps.orders.models import Order\nfrom apps.orders.serializers import OrderSerializer\n\nUser = get_user_model()\nlogger = logging.getLogger(__name__)\n\n# Configure Stripe\nstripe.api_key = settings.STRIPE_SECRET_KEY\n\n\n@api_view([\'POST\'])\n@permission_classes([IsAuthenticated])\ndef create_payment_intent(request):\n    """\n    Create a Stripe payment intent for an order.\n    """\n    try:\n        order_id = request.data.get(\'order_id\')\n        if not order_id:\n            return Response(\n                {\'error\': \'Order ID is required\'}, \n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        order = get_object_or_404(Order, id=order_id, user=request.user)\n        \n        if order.status != \'pending\':\n            return Response(\n                {\'error\': \'Order is not in pending status\'}, \n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        # Convert amount to cents for Stripe\n        amount_cents = int(order.total_amount * 100)\n\n        # Create Stripe payment intent\n        intent = stripe.PaymentIntent.create(\n            amount=amount_cents,\n            currency=\'usd\',\n            metadata={\n                \'order_id\': str(order.id),\n                \'user_id\': str(request.user.id),\n            },\n            automatic_payment_methods={\'enabled\': True},\n        )\n\n        # Save payment intent to database\n        payment_intent = PaymentIntent.objects.create(\n            stripe_payment_intent_id=intent.id,\n            order=order,\n            user=request.user,\n            amount=order.total_amount,\n            currency=\'usd\',\n            status=intent.status\n        )\n\n        serializer = PaymentIntentSerializer(payment_intent)\n        \n        return Response({\n            \'payment_intent\': serializer.data,\n            \'client_secret\': intent.client_secret,\n            \'publishable_key\': settings.STRIPE_PUBLISHABLE_KEY\n        }, status=status.HTTP_201_CREATED)\n\n    except Order.DoesNotExist:\n        return Response(\n            {\'error\': \'Order not found\'}, \n            status=status.HTTP_404_NOT_FOUND\n        )\n    except stripe.error.StripeError as e:\n        logger.error(f"Stripe error creating payment intent: {str(e)}")\n        return Response(\n            {\'error\': \'Payment processing error\'}, \n            status=status.HTTP_400_BAD_REQUEST\n        )\n    except Exception as e:\n        logger.error(f"Error creating payment intent: {str(e)}")\n        return Response(\n            {\'error\': \'Internal server error\'}, \n            status=status.HTTP_500_INTERNAL_SERVER_ERROR\n        )\n\n\n@api_view([\'POST\'])\n@permission_classes([IsAuthenticated])\ndef confirm_payment(request):\n    """\n    Confirm a payment and update order status.\n    """\n    try:\n        payment_intent_id = request.data.get(\'payment_intent_id\')\n        if not payment_intent_id:\n            return Response(\n                {\'error\': \'Payment intent ID is required\'}, \n                status=status.HTTP_400_BAD_REQUEST\n            )\n\n        # Retrieve payment intent from Stripe\n        stripe_intent = stripe.PaymentIntent.retrieve(payment_intent_id)\n        \n        # Get local payment intent\n        payment_intent = get_object_or_404(\n            PaymentIntent, \n            stripe_payment_intent_id=payment_intent_id,\n            user=request.user\n        )\n\n        if stripe_intent.status ==' additional_kwargs={} response_metadata={'id': 'msg_01P3CQy8Ni4eenXgqmg67hSL', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--87a7c9b3-de3b-4150-ace8-55bc26713dca-0' usage_metadata={'input_tokens': 402, 'output_tokens': 1024, 'total_tokens': 1426, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}