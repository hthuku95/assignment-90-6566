content='from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.core.validators import MinValueValidator, MaxValueValidator\nfrom django.urls import reverse\nfrom django.utils.text import slugify\nfrom decimal import Decimal\nimport uuid\nfrom PIL import Image\nimport os\n\n\nclass Category(models.Model):\n    """Product category model with hierarchical support"""\n    \n    name = models.CharField(max_length=100, unique=True)\n    slug = models.SlugField(max_length=100, unique=True, blank=True)\n    description = models.TextField(blank=True)\n    parent = models.ForeignKey(\n        \'self\', \n        on_delete=models.CASCADE, \n        null=True, \n        blank=True, \n        related_name=\'children\'\n    )\n    image = models.ImageField(upload_to=\'categories/\', blank=True, null=True)\n    is_active = models.BooleanField(default=True)\n    sort_order = models.PositiveIntegerField(default=0)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        verbose_name_plural = "Categories"\n        ordering = [\'sort_order\', \'name\']\n\n    def __str__(self):\n        return self.name\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n\n    def get_absolute_url(self):\n        return reverse(\'products:category-detail\', kwargs={\'slug\': self.slug})\n\n    @property\n    def get_full_path(self):\n        """Return full category path for breadcrumbs"""\n        path = [self.name]\n        parent = self.parent\n        while parent:\n            path.append(parent.name)\n            parent = parent.parent\n        return \' > \'.join(reversed(path))\n\n    def get_descendants(self):\n        """Get all descendant categories"""\n        descendants = []\n        for child in self.children.all():\n            descendants.append(child)\n            descendants.extend(child.get_descendants())\n        return descendants\n\n\nclass Product(models.Model):\n    """Main product model"""\n    \n    STATUS_CHOICES = [\n        (\'draft\', \'Draft\'),\n        (\'active\', \'Active\'),\n        (\'inactive\', \'Inactive\'),\n        (\'discontinued\', \'Discontinued\'),\n    ]\n\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200)\n    slug = models.SlugField(max_length=200, unique=True, blank=True)\n    description = models.TextField()\n    short_description = models.CharField(max_length=500, blank=True)\n    \n    # Pricing\n    price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2,\n        validators=[MinValueValidator(Decimal(\'0.01\'))]\n    )\n    compare_price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2,\n        null=True,\n        blank=True,\n        validators=[MinValueValidator(Decimal(\'0.01\'))]\n    )\n    cost_price = models.DecimalField(\n        max_digits=10, \n        decimal_places=2,\n        null=True,\n        blank=True,\n        validators=[MinValueValidator(Decimal(\'0.01\'))]\n    )\n    \n    # Organization\n    category = models.ForeignKey(\n        Category, \n        on_delete=models.SET_NULL, \n        null=True, \n        related_name=\'products\'\n    )\n    tags = models.ManyToManyField(\'Tag\', blank=True, related_name=\'products\')\n    \n    # Product details\n    sku = models.CharField(max_length=100, unique=True)\n    barcode = models.CharField(max_length=50, blank=True)\n    weight = models.DecimalField(max_digits=8, decimal_places=3, null=' additional_kwargs={} response_metadata={'id': 'msg_01137MxiJBQ72LtHxH7SzGjo', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 405, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--be9be04c-368a-4f03-8072-e4fe86f82b95-0' usage_metadata={'input_tokens': 405, 'output_tokens': 1024, 'total_tokens': 1429, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}