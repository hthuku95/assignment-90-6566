content='from rest_framework import serializers\nfrom django.contrib.auth import get_user_model\nfrom .models import Product, Category, ProductImage, Review, Inventory\n\nUser = get_user_model()\n\n\nclass CategorySerializer(serializers.ModelSerializer):\n    """Serializer for product categories"""\n    product_count = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = Category\n        fields = [\'id\', \'name\', \'slug\', \'description\', \'image\', \'is_active\', \'product_count\']\n        read_only_fields = [\'id\', \'slug\', \'product_count\']\n    \n    def get_product_count(self, obj):\n        """Get the number of active products in this category"""\n        return obj.products.filter(is_active=True).count()\n\n\nclass ProductImageSerializer(serializers.ModelSerializer):\n    """Serializer for product images"""\n    \n    class Meta:\n        model = ProductImage\n        fields = [\'id\', \'image\', \'alt_text\', \'is_primary\', \'order\']\n        read_only_fields = [\'id\']\n    \n    def validate_image(self, value):\n        """Validate image file size and format"""\n        if value.size > 5 * 1024 * 1024:  # 5MB limit\n            raise serializers.ValidationError("Image file too large. Maximum size is 5MB.")\n        \n        allowed_types = [\'image/jpeg\', \'image/png\', \'image/webp\']\n        if value.content_type not in allowed_types:\n            raise serializers.ValidationError(\n                "Unsupported image format. Please use JPEG, PNG, or WebP."\n            )\n        \n        return value\n\n\nclass InventorySerializer(serializers.ModelSerializer):\n    """Serializer for product inventory"""\n    \n    class Meta:\n        model = Inventory\n        fields = [\'id\', \'stock_quantity\', \'reserved_quantity\', \'available_quantity\']\n        read_only_fields = [\'id\', \'reserved_quantity\', \'available_quantity\']\n    \n    def validate_stock_quantity(self, value):\n        """Validate stock quantity is not negative"""\n        if value < 0:\n            raise serializers.ValidationError("Stock quantity cannot be negative.")\n        return value\n\n\nclass ReviewSerializer(serializers.ModelSerializer):\n    """Serializer for product reviews"""\n    user = serializers.StringRelatedField(read_only=True)\n    user_id = serializers.IntegerField(read_only=True)\n    \n    class Meta:\n        model = Review\n        fields = [\n            \'id\', \'user\', \'user_id\', \'rating\', \'title\', \'comment\',\n            \'is_verified_purchase\', \'created_at\', \'updated_at\'\n        ]\n        read_only_fields = [\'id\', \'user\', \'user_id\', \'is_verified_purchase\', \'created_at\', \'updated_at\']\n    \n    def validate_rating(self, value):\n        """Validate rating is between 1 and 5"""\n        if not (1 <= value <= 5):\n            raise serializers.ValidationError("Rating must be between 1 and 5.")\n        return value\n    \n    def validate(self, data):\n        """Validate that user hasn\'t already reviewed this product"""\n        request = self.context.get(\'request\')\n        if request and hasattr(request, \'user\'):\n            product_id = self.context.get(\'product_id\')\n            if product_id and Review.objects.filter(\n                user=request.user, \n                product_id=product_id\n            ).exists():\n                raise serializers.ValidationError(\n                    "You have already reviewed this product."\n                )\n        return data\n\n\nclass ProductListSerializer(serializers.ModelSerializer):\n    """Lightweight serializer for product listings"""\n    category = CategorySerializer(read_only=True)\n    primary_image = serializers.SerializerMethodField()\n    average_rating = serializers.DecimalField(max_digits=3, decimal_places=2, read_only=True)\n    review_count = serializers.IntegerField(read_only=True)\n    is_in_stock' additional_kwargs={} response_metadata={'id': 'msg_01EgfZhww5GUntYJyRF8aPz5', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 405, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--c7b8dd66-ccff-4c35-aca7-6693b05d27ac-0' usage_metadata={'input_tokens': 405, 'output_tokens': 1024, 'total_tokens': 1429, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}