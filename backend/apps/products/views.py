content='from rest_framework import generics, status, filters\nfrom rest_framework.decorators import api_view, permission_classes\nfrom rest_framework.response import Response\nfrom rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom django.db.models import Q, Avg\nfrom django.shortcuts import get_object_or_404\nimport logging\n\nfrom .models import Product, Category, ProductImage, Review\nfrom .serializers import (\n    ProductSerializer, \n    ProductDetailSerializer,\n    CategorySerializer,\n    ReviewSerializer,\n    ProductCreateSerializer\n)\nfrom .filters import ProductFilter\nfrom .permissions import IsOwnerOrReadOnly\n\nlogger = logging.getLogger(__name__)\n\n\nclass ProductListCreateView(generics.ListCreateAPIView):\n    """\n    List all products or create a new product.\n    Supports filtering, searching, and ordering.\n    """\n    queryset = Product.objects.select_related(\'category\').prefetch_related(\n        \'images\', \'reviews\'\n    ).filter(is_active=True)\n    serializer_class = ProductSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly]\n    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]\n    filterset_class = ProductFilter\n    search_fields = [\'name\', \'description\', \'category__name\']\n    ordering_fields = [\'created_at\', \'price\', \'name\', \'rating\']\n    ordering = [\'-created_at\']\n\n    def get_serializer_class(self):\n        if self.request.method == \'POST\':\n            return ProductCreateSerializer\n        return ProductSerializer\n\n    def perform_create(self, serializer):\n        """Create a new product with the current user as owner."""\n        try:\n            serializer.save(created_by=self.request.user)\n            logger.info(f"Product created by user {self.request.user.id}")\n        except Exception as e:\n            logger.error(f"Error creating product: {str(e)}")\n            raise\n\n    def get_queryset(self):\n        """Filter products based on query parameters."""\n        queryset = super().get_queryset()\n        \n        # Filter by category\n        category_id = self.request.query_params.get(\'category\', None)\n        if category_id:\n            try:\n                queryset = queryset.filter(category_id=category_id)\n            except ValueError:\n                pass\n\n        # Filter by price range\n        min_price = self.request.query_params.get(\'min_price\', None)\n        max_price = self.request.query_params.get(\'max_price\', None)\n        \n        if min_price:\n            try:\n                queryset = queryset.filter(price__gte=float(min_price))\n            except ValueError:\n                pass\n                \n        if max_price:\n            try:\n                queryset = queryset.filter(price__lte=float(max_price))\n            except ValueError:\n                pass\n\n        # Filter by availability\n        in_stock = self.request.query_params.get(\'in_stock\', None)\n        if in_stock and in_stock.lower() == \'true\':\n            queryset = queryset.filter(stock_quantity__gt=0)\n\n        return queryset\n\n\nclass ProductDetailView(generics.RetrieveUpdateDestroyAPIView):\n    """\n    Retrieve, update or delete a product instance.\n    """\n    queryset = Product.objects.select_related(\'category\').prefetch_related(\n        \'images\', \'reviews__user\'\n    ).filter(is_active=True)\n    serializer_class = ProductDetailSerializer\n    permission_classes = [IsAuthenticatedOrReadOnly, IsOwnerOrReadOnly]\n    lookup_field = \'slug\'\n\n    def get_object(self):\n        """Get product by slug and increment view count."""\n        try:\n            obj = super().get_object()\n            # Increment view count\n            Product.objects.filter(pk=obj.pk).update(view_count=obj.view_count + 1)\n            return obj\n        except Exception as e:\n            logger.error(f"Error retrieving product: {str(e)' additional_kwargs={} response_metadata={'id': 'msg_01HBSpayzQiWyHTZmFPf9urW', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 404, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--86514b05-df02-464e-b6cb-ffaaf0ab3e1d-0' usage_metadata={'input_tokens': 404, 'output_tokens': 1024, 'total_tokens': 1428, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}