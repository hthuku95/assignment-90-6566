content='"""\nWSGI config for ecommerce project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n"""\n\nimport os\nimport sys\nfrom django.core.wsgi import get_wsgi_application\nfrom django.core.exceptions import ImproperlyConfigured\nimport logging\n\n# Configure logging for WSGI\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\'%(asctime)s [%(levelname)s] %(name)s: %(message)s\',\n    handlers=[\n        logging.StreamHandler(sys.stdout),\n    ]\n)\n\nlogger = logging.getLogger(__name__)\n\n# Add the project directory to Python path\nproject_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nif project_root not in sys.path:\n    sys.path.insert(0, project_root)\n\n# Set the default Django settings module\nos.environ.setdefault(\'DJANGO_SETTINGS_MODULE\', \'config.settings.production\')\n\ntry:\n    # Get the Django WSGI application\n    application = get_wsgi_application()\n    logger.info("WSGI application initialized successfully")\n    \nexcept ImproperlyConfigured as e:\n    logger.error(f"Django configuration error: {e}")\n    raise\nexcept Exception as e:\n    logger.error(f"Failed to initialize WSGI application: {e}")\n    raise\n\n# Middleware for handling WSGI errors gracefully\nclass WSGIErrorMiddleware:\n    def __init__(self, application):\n        self.application = application\n    \n    def __call__(self, environ, start_response):\n        try:\n            return self.application(environ, start_response)\n        except Exception as e:\n            logger.error(f"WSGI application error: {e}")\n            # Return a 500 error response\n            status = \'500 Internal Server Error\'\n            headers = [(\'Content-Type\', \'text/plain\')]\n            start_response(status, headers)\n            return [b\'Internal Server Error\']\n\n# Wrap the application with error handling middleware\napplication = WSGIErrorMiddleware(application)\n\n# Health check endpoint for load balancers\ndef health_check_application(environ, start_response):\n    """Simple health check endpoint for load balancers and monitoring"""\n    if environ.get(\'PATH_INFO\') == \'/health/\':\n        status = \'200 OK\'\n        headers = [\n            (\'Content-Type\', \'application/json\'),\n            (\'Cache-Control\', \'no-cache, no-store, must-revalidate\'),\n        ]\n        start_response(status, headers)\n        return [b\'{"status": "healthy", "service": "ecommerce-backend"}\']\n    \n    # Pass through to Django application for all other requests\n    return application(environ, start_response)\n\n# Use health check wrapper as the final application\napplication = health_check_application' additional_kwargs={} response_metadata={'id': 'msg_01B7ty6QVcNPua5coxFjwCMc', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'end_turn', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 402, 'output_tokens': 735, 'service_tier': 'standard'}} id='run--7070051f-2218-42fe-9e58-55d51558d565-0' usage_metadata={'input_tokens': 402, 'output_tokens': 735, 'total_tokens': 1137, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}