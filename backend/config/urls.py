content='from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.http import JsonResponse\nfrom django.views.decorators.http import require_http_methods\nfrom django.views.decorators.csrf import csrf_exempt\nimport logging\n\nlogger = logging.getLogger(__name__)\n\n@csrf_exempt\n@require_http_methods(["GET"])\ndef health_check(request):\n    """Health check endpoint for monitoring and load balancers"""\n    return JsonResponse({\n        \'status\': \'healthy\',\n        \'service\': \'ecommerce-api\',\n        \'version\': \'1.0.0\'\n    })\n\n@csrf_exempt\n@require_http_methods(["GET"])\ndef api_info(request):\n    """API information endpoint"""\n    return JsonResponse({\n        \'name\': \'E-commerce Platform API\',\n        \'version\': \'1.0.0\',\n        \'description\': \'Comprehensive e-commerce platform with user management, products, orders, and payments\',\n        \'endpoints\': {\n            \'auth\': \'/api/auth/\',\n            \'users\': \'/api/users/\',\n            \'products\': \'/api/products/\',\n            \'orders\': \'/api/orders/\',\n            \'payments\': \'/api/payments/\',\n            \'notifications\': \'/api/notifications/\',\n            \'cart\': \'/api/cart/\',\n            \'reviews\': \'/api/reviews/\',\n            \'categories\': \'/api/categories/\',\n            \'admin\': \'/admin/\',\n            \'health\': \'/health/\',\n            \'docs\': \'/api/docs/\'\n        }\n    })\n\nurlpatterns = [\n    # Admin interface\n    path(\'admin/\', admin.site.urls),\n    \n    # Health check and API info\n    path(\'health/\', health_check, name=\'health_check\'),\n    path(\'api/\', api_info, name=\'api_info\'),\n    \n    # API endpoints\n    path(\'api/auth/\', include(\'apps.authentication.urls\')),\n    path(\'api/users/\', include(\'apps.users.urls\')),\n    path(\'api/products/\', include(\'apps.products.urls\')),\n    path(\'api/orders/\', include(\'apps.orders.urls\')),\n    path(\'api/payments/\', include(\'apps.payments.urls\')),\n    path(\'api/notifications/\', include(\'apps.notifications.urls\')),\n    path(\'api/cart/\', include(\'apps.cart.urls\')),\n    path(\'api/reviews/\', include(\'apps.reviews.urls\')),\n    path(\'api/categories/\', include(\'apps.categories.urls\')),\n    \n    # API documentation (if using DRF)\n    path(\'api/docs/\', include(\'rest_framework.urls\')),\n]\n\n# Serve media files in development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n    \n    # Add debug toolbar in development\n    try:\n        import debug_toolbar\n        urlpatterns = [\n            path(\'__debug__/\', include(debug_toolbar.urls)),\n        ] + urlpatterns\n    except ImportError:\n        logger.warning("Debug toolbar not available")\n\n# Custom error handlers\ndef handler404(request, exception):\n    """Custom 404 error handler"""\n    return JsonResponse({\n        \'error\': \'Not Found\',\n        \'message\': \'The requested resource was not found\',\n        \'status_code\': 404\n    }, status=404)\n\ndef handler500(request):\n    """Custom 500 error handler"""\n    logger.error("Internal server error occurred", exc_info=True)\n    return JsonResponse({\n        \'error\': \'Internal Server Error\',\n        \'message\': \'An unexpected error occurred\',\n        \'status_code\': 500\n    }, status=500)\n\ndef handler403(request, exception):\n    """Custom 403 error handler"""\n    return JsonResponse({\n        \'error\': \'Forbidden\',\n        \'message\': \'You do not have permission to access this resource\',\n        \'status_code\': 403\n    }, status=403)\n\ndef handler400(request, exception):\n    """Custom 400 error handler"""\n    return JsonResponse({\n        \'error\': \'Bad Request\',\n        ' additional_kwargs={} response_metadata={'id': 'msg_01Jbx2oRNu3XvxHzoMcChiyr', 'model': 'claude-sonnet-4-20250514', 'stop_reason': 'max_tokens', 'stop_sequence': None, 'usage': {'cache_creation_input_tokens': 0, 'cache_read_input_tokens': 0, 'input_tokens': 398, 'output_tokens': 1024, 'service_tier': 'standard'}} id='run--2e5f7383-dbd6-4152-a921-de5a81d97a67-0' usage_metadata={'input_tokens': 398, 'output_tokens': 1024, 'total_tokens': 1422, 'input_token_details': {'cache_read': 0, 'cache_creation': 0}}